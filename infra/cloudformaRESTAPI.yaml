AWSTemplateFormatVersion: "2010-09-09"
Resources:
  MyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - DomainName: "gandolfo-s3-website.s3.amazonaws.com"
            Id: "MyS3Origin"
            S3OriginConfig:
              OriginAccessIdentity:
                !Join [
                  "",
                  [
                    "origin-access-identity/cloudfront/",
                    !Ref MyOriginAccessIdentity,
                  ],
                ]
        DefaultCacheBehavior:
          TargetOriginId: "MyS3Origin"
          ViewerProtocolPolicy: "redirect-to-https"
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: "none"
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          # Or specify an ACM certificate
  MyOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "comment"
  MyBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: "gandolfo-s3-website"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              CanonicalUser: !GetAtt MyOriginAccessIdentity.S3CanonicalUserId
            Action: "s3:GetObject"
            Resource: "arn:aws:s3:::gandolfo-s3-website/*"
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "Gondolfsclub"
  MyCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MyCognitoUserPool
      ClientName: "gondolfclient"
      GenerateSecret: false
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "gondolfapi"
      Description: "description2"
      # Define resources, methods...
  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: MyApiGetMethod # Make sure to list all methods that need to be deployed
    Properties:
      RestApiId: !Ref MyApiGateway
      Description: "Initial deployment"
  MyApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: "dev"
      Description: "Stage for development"
      RestApiId: !Ref MyApiGateway
      DeploymentId: !Ref MyApiDeployment # This should match the actual deployment resource ID
  MyApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt
        - "MyApiGateway"
        - "RootResourceId"
      PathPart: "example" # Change to your desired path
      RestApiId: !Ref "MyApiGateway"
  MyApiGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: "COGNITO_USER_POOLS"
      AuthorizerId: !Ref "MyCognitoAuthorizer"
      HttpMethod: "GET"
      ResourceId: !Ref "MyApiResource"
      RestApiId: !Ref "MyApiGateway"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations"
  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "lambdafunction"
      Runtime: "nodejs16.x"
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Handler: "function1.handler"
      Code:
        S3Bucket: gondolf-lambda-bucket
        S3Key: function1.zip
      # Environment, MemorySize, Timeout...
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCloudWatchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
  MyLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*/*/*"
  MyCognitoAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: "cognitoAuthorizer"
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref MyApiGateway
      ProviderARNs:
        - !GetAtt [MyCognitoUserPool, Arn]
